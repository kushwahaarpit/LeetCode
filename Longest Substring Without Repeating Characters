#Longest Substring Without Repeating Characters

Given a string s, find the length of the longest
substring
without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

 

Constraints:

    0 <= s.length <= 5 * 104
    s consists of English letters, digits, symbols and spaces.


#####################################################################################
#Solution:

class Solution {
    public int lengthOfLongestSubstring(String s) {

        if (s == null || s.equals("")) {
            return 0;
        }
       
        int start = 0;
       
        int end = 0;
     
        int maxSubString = 0;
     
        Set<Character> seen = new HashSet<>();

        while (end < s.length()) {
            if (seen.add(s.charAt(end))) {
                end++;
                maxSubString = Math.max(maxSubString, seen.size());
            } else {
                seen.remove(s.charAt(start));
                start++;
            }
        }
        return maxSubString;
}   
}
###################################################################
Runtime : 7 ms
Memory : 42.9 MB
Using sliding window 


Link to my solution : https://leetcode.com/problems/longest-substring-without-repeating-characters/solutions/3290986/using-sliding-window/
